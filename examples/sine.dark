eval "plunder.dark"
use plunder::*

let song = plunder {
    .tempo 140
    .bitrate 44100
    //bpb = bits per beat = (44100 * (60/120)) = 18900
    .synth sine {
        math::sine .t
    }
    
    .clip snare {
        .wav "snare.wav"
    }

    .clip samp {
        .mp3 "bt.mp3"
        .beats 1 32
    }

    .export {
        .wav "bt-remix.wav"
        .beats 1 256
    }
    
    .render {{
        1..
        16  => { .sine .s }
        // sine(bpb), sine(bpb+1), ..., sine(16bpb) ; s for sample
    
        17..
        32  => { .sine .s }
        // sine(16bpb), sine(16bpb+1), ..., sine(32bpb)

        33..
        48  => { .sine r }
        // sine(bpb), sine(bpb+1), ..., sine(16bpb) ; r for relative (sample)
    
        49..
        64  => { .snare b }
        // 1:snare(▶)..2:snare(▶).. ... ..16:snare(▶) ; b for beat

        65..
        80  => { .kick 2b; .snare (2b+1) }
        // 1:kick(▶)..2:snare(▶).. ... ..15:kick(▶)..16:snare(▶) ; two beats
    
        65..
        80  => { .samp .. }
        // 1:samp(▶,1)..2..3.. ... ..15..16:samp(⏹,16) ; concurrent to previous
    
        81..
        96  => { .samp a:9..z }
        // 1:samp(▶,9)..2..3.. ... ..15..16:samp(⏹,24) ; clip offset

        97..
        112 => { .samp a+1..z-1 }
        // 1..2:samp(▶,1)..3.. ... ..15:samp(⏹,14)..16 ; play duration

        113..
        128 => { .samp a..b:5..c:9..d }
        // 1:samp(▶) ... ..5:samp(⏸) ... ..9:samp(▶) ... ..16:samp(⏹) ; pause/play
        
        129..
        192 => { .samp .. }
        // 1:samp(▶)..2.. ... ..33:samp(⏹).. ... ..64 ; clip exhausts

        193..
        256 => { .samp ..|L }
        // 1:samp(▶)..2.. ... ..33:samp(⏹),samp(▶).. ... ..64:samp(⏹) ; loop clip
    }}
}

play song
export song "bt-remix.wav"

//todo:
//- [] beat and bar notation
